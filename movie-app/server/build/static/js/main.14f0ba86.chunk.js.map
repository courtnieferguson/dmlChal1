{"version":3,"sources":["components/movies-list-row.tsx","components/movies-list.tsx","components/movies.tsx","index.tsx"],"names":["MoviesListRow","props","className","position","movie","title","director","releaseDate","rating","onClick","handleMovieRemove","id","MoviesList","loading","length","map","idx","key","style","textAlign","colSpan","Movies","setDirector","useState","setTitle","setReleaseDate","setRating","movies","setMovies","setLoading","useEffect","fetchMovies","async","axios","get","then","response","data","catch","error","console","handleMovieSubmit","post","res","log","info","onSubmit","htmlFor","type","name","value","onChange","e","currentTarget","put","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.14f0ba86.chunk.js","sourcesContent":["// Import deps\nimport React from 'react'\n\n// Create interfaces\ninterface MoviesListRowUI {\n    position: number;\n    movie: {\n        id: number;\n        director: string;\n        title: string;\n        releaseDate: string;\n        rating: string;\n    }\n    handleMovieRemove: (id: number, title: string) => void;\n}\n\n// Create MovieListRow component\nexport const MoviesListRow = (props: MoviesListRowUI) => (\n    <tr className=\"table-row\">\n        <td className=\"table-item\">\n            {props.position}\n        </td>\n\n        <td className=\"table-item\">\n            {props.movie.title}\n        </td>\n\n        <td className=\"table-item\">\n            {props.movie.director}\n        </td>\n\n        <td className=\"table-item\">\n            {props.movie.releaseDate}\n        </td>\n\n        <td className=\"table-item\">\n            {props.movie.rating}\n        </td>\n\n        <td className=\"table-item\">\n            <button\n                className=\"btn btn-remove\"\n                onClick={() => props.handleMovieRemove(props.movie.id, props.movie.title)}>\n                Remove movie\n            </button>\n        </td>\n    </tr>\n)","import React from 'react'\n\n// Import components\nimport { MoviesListRow } from './movies-list-row'\n\n// Import styles\nimport './../styles/movies-list.css'\n\n// Create interfaces\ninterface MovieUI {\n    id: number;\n    director: string;\n    title: string;\n    releaseDate: string;\n    rating: string;\n}\n\ninterface MoviesListUI {\n    movie: MovieUI[];\n    loading: boolean;\n    handleMovieRemove: (id: number, title: string) => void;\n}\n\n// Create MoviesList component\nexport const MoviesList = (props: MoviesListUI) => {\n    // Show loading message\n    if (props.loading) return <p>Leaderboard table is loading...</p>\n\n    return (\n        <table className=\"table\">\n            <thead>\n            <tr>\n                <th className=\"table-head-item\" />\n\n                <th className=\"table-head-item\">Title</th>\n\n                <th className=\"table-head-item\">Director</th>\n\n                <th className=\"table-head-item\">Release date</th>\n\n                <th className=\"table-head-item\">Rating</th>\n\n                <th className=\"table-head-item\" />\n            </tr>\n            </thead>\n\n            <tbody className=\"table-body\">\n            {props.movie.length > 0 ? (\n                props.movie.map((movie: MovieUI, idx) => (\n                        <MoviesListRow\n                            key={movie.id}\n                            movie={movie}\n                            position={idx + 1}\n                            handleMovieRemove={props.handleMovieRemove}\n                        />\n                    )\n                )\n            ) : (\n                <tr className=\"table-row\">\n                    <td className=\"table-item\" style={{ textAlign: 'center' }} colSpan={6}>There are no movies to show. Create one!</td>\n                </tr>\n            )\n            }\n            </tbody>\n        </table>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n// Import components\nimport { MoviesList } from './movies-list'\n\n// Import styles\nimport './../styles/movies.css'\n\n// Create Bookshelf component\nexport const Movies = () => {\n    // Prepare states\n    const [director, setDirector] = useState('')\n    const [title, setTitle] = useState('')\n    const [releaseDate, setReleaseDate] = useState('')\n    const [rating, setRating] = useState('')\n    const [movies, setMovies] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    // Fetch all movies on initial render\n    useEffect(() => {\n        fetchMovies()\n    }, [])\n\n    // Fetch all movies\n    const fetchMovies = async () => {\n        // Send GET request to 'movies/all' endpoint\n        axios\n            .get('http://localhost:4001/movies/all')\n            .then(response => {\n                // Update the movies state\n                setMovies(response.data)\n\n                // Update loading state\n                setLoading(false)\n            })\n            .catch(error => console.error(`There was an error retrieving the movie list: ${error}`))\n    }\n\n    // Reset all input fields\n    const handleInputsReset = () => {\n        setDirector('')\n        setTitle('')\n        setReleaseDate('')\n        setRating('')\n    }\n\n    // Create new movie\n    const handleMovieCreate = () => {\n        // Send POST request to 'movies/create' endpoint\n        axios\n            .post('http://localhost:4001/movies/create', {\n                director: director,\n                title: title,\n                releaseDate: releaseDate,\n                rating: rating\n            })\n            .then(res => {\n                console.log(res.data)\n\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error creating the ${title} movie: ${error}`))\n    }\n\n    // Submit new movie\n    const handleMovieSubmit = () => {\n        // Check if all fields are filled\n        if (director.length > 0 && title.length > 0 && releaseDate.length > 0 && rating.length > 0) {\n            // Create new movie\n            handleMovieCreate()\n\n            console.info(`Movie ${title} by ${director} added.`)\n\n            // Reset all input fields\n            handleInputsReset()\n        }\n    }\n\n    // Remove movie\n    const handleMovieRemove = (id: number, title: string) => {\n        // Send PUT request to 'movies/delete' endpoint\n        axios\n            .put('http://localhost:4001/movies/delete', { id: id })\n            .then(() => {\n                console.log(`Movie ${title} removed.`)\n\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error removing the ${title} movie: ${error}`))\n    }\n\n    // Reset movie list (remove all movies)\n    const handleListReset = () => {\n        // Send PUT request to 'movies/reset' endpoint\n        axios.put('http://localhost:4001/movies/reset')\n            .then(() => {\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error resetting the movie list: ${error}`))\n    }\n\n    return (\n        <div className=\"movie-list-wrapper\">\n            {/* Form for creating new movie */}\n            <div className=\"movie-list-form\">\n                <div className=\"form-wrapper\" onSubmit={handleMovieSubmit}>\n                    <div className=\"form-row\">\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"title\">Enter title:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"title\" name=\"title\" value={title} onChange={(e) => setTitle(e.currentTarget.value)} />\n                        </fieldset>\n\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"director\">Enter Director:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"director\" name=\"director\" value={director} onChange={(e) => setDirector(e.currentTarget.value)} />\n                        </fieldset>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"releaseDate\">Enter release date:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"releaseDate\" name=\"releaseDate\" value={releaseDate} onChange={(e) => setReleaseDate(e.currentTarget.value)} />\n                        </fieldset>\n\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"rating\">Enter rating:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"rating\" name=\"rating\" value={rating} onChange={(e) => setRating(e.currentTarget.value)} />\n                        </fieldset>\n                    </div>\n                </div>\n\n                <button onClick={handleMovieSubmit} className=\"btn btn-add\">Add the movie</button>\n            </div>\n\n            {/* Render movies list component */}\n            <MoviesList movie={movies} loading={loading} handleMovieRemove={handleMovieRemove} />\n\n            {/* Show reset button if list contains at least one movie */}\n            {movies.length > 0 && (\n                <button className=\"btn btn-reset\" onClick={handleListReset}>Reset movie list.</button>\n            )}\n        </div>\n    )\n}","// Import deps\nimport React from 'react'\nimport { render } from 'react-dom'\n\n// Import components\nimport { Movies } from './components/movies'\n\n// Import styles\nimport './styles/styles.css'\n\n// Find div container\nconst rootElement = document.getElementById('root')\n\n// Render Movies component in the DOM\nrender(<Movies />, rootElement)\n"],"sourceRoot":""}