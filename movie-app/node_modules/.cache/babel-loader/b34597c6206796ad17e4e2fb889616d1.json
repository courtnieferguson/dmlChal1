{"ast":null,"code":"var _jsxFileName = \"/Users/courtnieferguson/IdeaProjects/dmlChal1/movie-app/src/components/movies.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios'; // Import components\n\nimport { MoviesList } from './movies-list'; // Import styles\n\nimport './../styles/movies.css'; // Create Bookshelf component\n\nexport const Movies = () => {\n  // Prepare states\n  const [director, setDirector] = useState('');\n  const [title, setTitle] = useState('');\n  const [releaseDate, setReleaseDate] = useState('');\n  const [rating, setRating] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true); // Fetch all movies on initial render\n\n  useEffect(() => {\n    fetchMovies();\n  }, []); // Fetch all movies\n\n  const fetchMovies = async () => {\n    // Send GET request to 'movies/all' endpoint\n    axios.get('http://localhost:4001/movies/all').then(response => {\n      // Update the movies state\n      setMovies(response.data); // Update loading state\n\n      setLoading(false);\n    }).catch(error => console.error(`There was an error retrieving the movie list: ${error}`));\n  }; // Reset all input fields\n\n\n  const handleInputsReset = () => {\n    setDirector('');\n    setTitle('');\n    setReleaseDate('');\n    setRating('');\n  }; // Create new movie\n\n\n  const handleMovieCreate = () => {\n    // Send POST request to 'movies/create' endpoint\n    axios.post('http://localhost:4001/movies/create', {\n      director: director,\n      title: title,\n      releaseDate: releaseDate,\n      rating: rating\n    }).then(res => {\n      console.log(res.data); // Fetch all movies to refresh\n      // the movies on the movies list\n\n      fetchMovies();\n    }).catch(error => console.error(`There was an error creating the ${title} movie: ${error}`));\n  }; // Submit new movie\n\n\n  const handleMovieSubmit = () => {\n    // Check if all fields are filled\n    if (director.length > 0 && title.length > 0 && releaseDate.length > 0 && rating.length > 0) {\n      // Create new movie\n      handleMovieCreate();\n      console.info(`Movie ${title} by ${director} added.`); // Reset all input fields\n\n      handleInputsReset();\n    }\n  }; // Remove movie\n\n\n  const handleMovieRemove = (id, title) => {\n    // Send PUT request to 'movies/delete' endpoint\n    axios.put('http://localhost:4001/movies/delete', {\n      id: id\n    }).then(() => {\n      console.log(`Movie ${title} removed.`); // Fetch all movies to refresh\n      // the movies on the movies list\n\n      fetchMovies();\n    }).catch(error => console.error(`There was an error removing the ${title} movie: ${error}`));\n  }; // Reset movie list (remove all movies)\n\n\n  const handleListReset = () => {\n    // Send PUT request to 'movies/reset' endpoint\n    axios.put('http://localhost:4001/movies/reset').then(() => {\n      // Fetch all movies to refresh\n      // the movies on the movies list\n      fetchMovies();\n    }).catch(error => console.error(`There was an error resetting the movie list: ${error}`));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-wrapper\",\n    onSubmit: handleMovieSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-label\",\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }\n  }, \"Enter title:\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-input\",\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    value: title,\n    onChange: e => setTitle(e.currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-label\",\n    htmlFor: \"director\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }, \"Enter Director:\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-input\",\n    type: \"text\",\n    id: \"director\",\n    name: \"director\",\n    value: director,\n    onChange: e => setDirector(e.currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-label\",\n    htmlFor: \"releaseDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  }, \"Enter release date:\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-input\",\n    type: \"text\",\n    id: \"releaseDate\",\n    name: \"releaseDate\",\n    value: releaseDate,\n    onChange: e => setReleaseDate(e.currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-label\",\n    htmlFor: \"rating\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  }, \"Enter rating:\"), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"form-input\",\n    type: \"text\",\n    id: \"rating\",\n    name: \"rating\",\n    value: rating,\n    onChange: e => setRating(e.currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleMovieSubmit,\n    className: \"btn btn-add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"Add the movie\")), /*#__PURE__*/React.createElement(MoviesList, {\n    movie: movies,\n    loading: loading,\n    handleMovieRemove: handleMovieRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), movies.length > 0 && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-reset\",\n    onClick: handleListReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, \"Reset movie list.\"));\n};","map":{"version":3,"sources":["/Users/courtnieferguson/IdeaProjects/dmlChal1/movie-app/src/components/movies.tsx"],"names":["React","useEffect","useState","axios","MoviesList","Movies","director","setDirector","title","setTitle","releaseDate","setReleaseDate","rating","setRating","movies","setMovies","loading","setLoading","fetchMovies","get","then","response","data","catch","error","console","handleInputsReset","handleMovieCreate","post","res","log","handleMovieSubmit","length","info","handleMovieRemove","id","put","handleListReset","e","currentTarget","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n// Import components\nimport { MoviesList } from './movies-list'\n\n// Import styles\nimport './../styles/movies.css'\n\n// Create Bookshelf component\nexport const Movies = () => {\n    // Prepare states\n    const [director, setDirector] = useState('')\n    const [title, setTitle] = useState('')\n    const [releaseDate, setReleaseDate] = useState('')\n    const [rating, setRating] = useState('')\n    const [movies, setMovies] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    // Fetch all movies on initial render\n    useEffect(() => {\n        fetchMovies()\n    }, [])\n\n    // Fetch all movies\n    const fetchMovies = async () => {\n        // Send GET request to 'movies/all' endpoint\n        axios\n            .get('http://localhost:4001/movies/all')\n            .then(response => {\n                // Update the movies state\n                setMovies(response.data)\n\n                // Update loading state\n                setLoading(false)\n            })\n            .catch(error => console.error(`There was an error retrieving the movie list: ${error}`))\n    }\n\n    // Reset all input fields\n    const handleInputsReset = () => {\n        setDirector('')\n        setTitle('')\n        setReleaseDate('')\n        setRating('')\n    }\n\n    // Create new movie\n    const handleMovieCreate = () => {\n        // Send POST request to 'movies/create' endpoint\n        axios\n            .post('http://localhost:4001/movies/create', {\n                director: director,\n                title: title,\n                releaseDate: releaseDate,\n                rating: rating\n            })\n            .then(res => {\n                console.log(res.data)\n\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error creating the ${title} movie: ${error}`))\n    }\n\n    // Submit new movie\n    const handleMovieSubmit = () => {\n        // Check if all fields are filled\n        if (director.length > 0 && title.length > 0 && releaseDate.length > 0 && rating.length > 0) {\n            // Create new movie\n            handleMovieCreate()\n\n            console.info(`Movie ${title} by ${director} added.`)\n\n            // Reset all input fields\n            handleInputsReset()\n        }\n    }\n\n    // Remove movie\n    const handleMovieRemove = (id: number, title: string) => {\n        // Send PUT request to 'movies/delete' endpoint\n        axios\n            .put('http://localhost:4001/movies/delete', { id: id })\n            .then(() => {\n                console.log(`Movie ${title} removed.`)\n\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error removing the ${title} movie: ${error}`))\n    }\n\n    // Reset movie list (remove all movies)\n    const handleListReset = () => {\n        // Send PUT request to 'movies/reset' endpoint\n        axios.put('http://localhost:4001/movies/reset')\n            .then(() => {\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error resetting the movie list: ${error}`))\n    }\n\n    return (\n        <div className=\"movie-list-wrapper\">\n            {/* Form for creating new movie */}\n            <div className=\"movie-list-form\">\n                <div className=\"form-wrapper\" onSubmit={handleMovieSubmit}>\n                    <div className=\"form-row\">\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"title\">Enter title:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"title\" name=\"title\" value={title} onChange={(e) => setTitle(e.currentTarget.value)} />\n                        </fieldset>\n\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"director\">Enter Director:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"director\" name=\"director\" value={director} onChange={(e) => setDirector(e.currentTarget.value)} />\n                        </fieldset>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"releaseDate\">Enter release date:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"releaseDate\" name=\"releaseDate\" value={releaseDate} onChange={(e) => setReleaseDate(e.currentTarget.value)} />\n                        </fieldset>\n\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"rating\">Enter rating:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"rating\" name=\"rating\" value={rating} onChange={(e) => setRating(e.currentTarget.value)} />\n                        </fieldset>\n                    </div>\n                </div>\n\n                <button onClick={handleMovieSubmit} className=\"btn btn-add\">Add the movie</button>\n            </div>\n\n            {/* Render movies list component */}\n            <MoviesList movie={movies} loading={loading} handleMovieRemove={handleMovieRemove} />\n\n            {/* Show reset button if list contains at least one movie */}\n            {movies.length > 0 && (\n                <button className=\"btn btn-reset\" onClick={handleListReset}>Reset movie list.</button>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}