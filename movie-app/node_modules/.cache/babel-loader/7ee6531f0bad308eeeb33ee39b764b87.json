{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';// Import components\nimport{MoviesList}from'./movies-list';// Import styles\nimport'./../styles/movies.css';// Create Bookshelf component\nexport const Movies=()=>{// Prepare states\nconst[director,setDirector]=useState('');const[title,setTitle]=useState('');const[releaseDate,setReleaseDate]=useState('');const[rating,setRating]=useState('');const[movies,setMovies]=useState([]);const[loading,setLoading]=useState(true);// Fetch all movies on initial render\nuseEffect(()=>{fetchMovies();},[]);// Fetch all movies\nconst fetchMovies=async()=>{// Send GET request to 'movies/all' endpoint\naxios.get('http://localhost:4001/movies/all').then(response=>{// Update the movies state\nsetMovies(response.data);// Update loading state\nsetLoading(false);}).catch(error=>console.error(`There was an error retrieving the movie list: ${error}`));};// Reset all input fields\nconst handleInputsReset=()=>{setDirector('');setTitle('');setReleaseDate('');setRating('');};// Create new movie\nconst handleMovieCreate=()=>{// Send POST request to 'movies/create' endpoint\naxios.post('http://localhost:4001/movies/create',{director:director,title:title,releaseDate:releaseDate,rating:rating}).then(res=>{console.log(res.data);// Fetch all movies to refresh\n// the movies on the movies list\nfetchMovies();}).catch(error=>console.error(`There was an error creating the ${title} movie: ${error}`));};// Submit new movie\nconst handleMovieSubmit=()=>{// Check if all fields are filled\nif(director.length>0&&title.length>0&&releaseDate.length>0&&rating.length>0){// Create new movie\nhandleMovieCreate();console.info(`Movie ${title} by ${director} added.`);// Reset all input fields\nhandleInputsReset();}};// Remove movie\nconst handleMovieRemove=(id,title)=>{// Send PUT request to 'movies/delete' endpoint\naxios.put('http://localhost:4001/movies/delete',{id:id}).then(()=>{console.log(`Movie ${title} removed.`);// Fetch all movies to refresh\n// the movies on the movies list\nfetchMovies();}).catch(error=>console.error(`There was an error removing the ${title} movie: ${error}`));};// Reset movie list (remove all movies)\nconst handleListReset=()=>{// Send PUT request to 'movies/reset' endpoint\naxios.put('http://localhost:4001/movies/reset').then(()=>{// Fetch all movies to refresh\n// the movies on the movies list\nfetchMovies();}).catch(error=>console.error(`There was an error resetting the movie list: ${error}`));};return/*#__PURE__*/React.createElement(\"div\",{className:\"movie-list-wrapper\"},/*#__PURE__*/React.createElement(\"div\",{className:\"movie-list-form\"},/*#__PURE__*/React.createElement(\"div\",{className:\"form-wrapper\",onSubmit:handleMovieSubmit},/*#__PURE__*/React.createElement(\"div\",{className:\"form-row\"},/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\",htmlFor:\"title\"},\"Enter title:\"),/*#__PURE__*/React.createElement(\"input\",{className:\"form-input\",type:\"text\",id:\"title\",name:\"title\",value:title,onChange:e=>setTitle(e.currentTarget.value)})),/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\",htmlFor:\"director\"},\"Enter Director:\"),/*#__PURE__*/React.createElement(\"input\",{className:\"form-input\",type:\"text\",id:\"director\",name:\"director\",value:director,onChange:e=>setDirector(e.currentTarget.value)}))),/*#__PURE__*/React.createElement(\"div\",{className:\"form-row\"},/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\",htmlFor:\"releaseDate\"},\"Enter release date:\"),/*#__PURE__*/React.createElement(\"input\",{className:\"form-input\",type:\"text\",id:\"releaseDate\",name:\"releaseDate\",value:releaseDate,onChange:e=>setReleaseDate(e.currentTarget.value)})),/*#__PURE__*/React.createElement(\"fieldset\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\",htmlFor:\"rating\"},\"Enter rating:\"),/*#__PURE__*/React.createElement(\"input\",{className:\"form-input\",type:\"text\",id:\"rating\",name:\"rating\",value:rating,onChange:e=>setRating(e.currentTarget.value)})))),/*#__PURE__*/React.createElement(\"button\",{onClick:handleMovieSubmit,className:\"btn btn-add\"},\"Add the movie\")),/*#__PURE__*/React.createElement(MoviesList,{movie:movies,loading:loading,handleMovieRemove:handleMovieRemove}),movies.length>0&&/*#__PURE__*/React.createElement(\"button\",{className:\"btn btn-reset\",onClick:handleListReset},\"Reset movie list.\"));};","map":{"version":3,"sources":["/Users/courtnieferguson/IdeaProjects/dmlChal1/movie-app/src/components/movies.tsx"],"names":["React","useEffect","useState","axios","MoviesList","Movies","director","setDirector","title","setTitle","releaseDate","setReleaseDate","rating","setRating","movies","setMovies","loading","setLoading","fetchMovies","get","then","response","data","catch","error","console","handleInputsReset","handleMovieCreate","post","res","log","handleMovieSubmit","length","info","handleMovieRemove","id","put","handleListReset","e","currentTarget","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\n// Import components\nimport { MoviesList } from './movies-list'\n\n// Import styles\nimport './../styles/movies.css'\n\n// Create Bookshelf component\nexport const Movies = () => {\n    // Prepare states\n    const [director, setDirector] = useState('')\n    const [title, setTitle] = useState('')\n    const [releaseDate, setReleaseDate] = useState('')\n    const [rating, setRating] = useState('')\n    const [movies, setMovies] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    // Fetch all movies on initial render\n    useEffect(() => {\n        fetchMovies()\n    }, [])\n\n    // Fetch all movies\n    const fetchMovies = async () => {\n        // Send GET request to 'movies/all' endpoint\n        axios\n            .get('http://localhost:4001/movies/all')\n            .then(response => {\n                // Update the movies state\n                setMovies(response.data)\n\n                // Update loading state\n                setLoading(false)\n            })\n            .catch(error => console.error(`There was an error retrieving the movie list: ${error}`))\n    }\n\n    // Reset all input fields\n    const handleInputsReset = () => {\n        setDirector('')\n        setTitle('')\n        setReleaseDate('')\n        setRating('')\n    }\n\n    // Create new movie\n    const handleMovieCreate = () => {\n        // Send POST request to 'movies/create' endpoint\n        axios\n            .post('http://localhost:4001/movies/create', {\n                director: director,\n                title: title,\n                releaseDate: releaseDate,\n                rating: rating\n            })\n            .then(res => {\n                console.log(res.data)\n\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error creating the ${title} movie: ${error}`))\n    }\n\n    // Submit new movie\n    const handleMovieSubmit = () => {\n        // Check if all fields are filled\n        if (director.length > 0 && title.length > 0 && releaseDate.length > 0 && rating.length > 0) {\n            // Create new movie\n            handleMovieCreate()\n\n            console.info(`Movie ${title} by ${director} added.`)\n\n            // Reset all input fields\n            handleInputsReset()\n        }\n    }\n\n    // Remove movie\n    const handleMovieRemove = (id: number, title: string) => {\n        // Send PUT request to 'movies/delete' endpoint\n        axios\n            .put('http://localhost:4001/movies/delete', { id: id })\n            .then(() => {\n                console.log(`Movie ${title} removed.`)\n\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error removing the ${title} movie: ${error}`))\n    }\n\n    // Reset movie list (remove all movies)\n    const handleListReset = () => {\n        // Send PUT request to 'movies/reset' endpoint\n        axios.put('http://localhost:4001/movies/reset')\n            .then(() => {\n                // Fetch all movies to refresh\n                // the movies on the movies list\n                fetchMovies()\n            })\n            .catch(error => console.error(`There was an error resetting the movie list: ${error}`))\n    }\n\n    return (\n        <div className=\"movie-list-wrapper\">\n            {/* Form for creating new movie */}\n            <div className=\"movie-list-form\">\n                <div className=\"form-wrapper\" onSubmit={handleMovieSubmit}>\n                    <div className=\"form-row\">\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"title\">Enter title:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"title\" name=\"title\" value={title} onChange={(e) => setTitle(e.currentTarget.value)} />\n                        </fieldset>\n\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"director\">Enter Director:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"director\" name=\"director\" value={director} onChange={(e) => setDirector(e.currentTarget.value)} />\n                        </fieldset>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"releaseDate\">Enter release date:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"releaseDate\" name=\"releaseDate\" value={releaseDate} onChange={(e) => setReleaseDate(e.currentTarget.value)} />\n                        </fieldset>\n\n                        <fieldset>\n                            <label className=\"form-label\" htmlFor=\"rating\">Enter rating:</label>\n                            <input className=\"form-input\" type=\"text\" id=\"rating\" name=\"rating\" value={rating} onChange={(e) => setRating(e.currentTarget.value)} />\n                        </fieldset>\n                    </div>\n                </div>\n\n                <button onClick={handleMovieSubmit} className=\"btn btn-add\">Add the movie</button>\n            </div>\n\n            {/* Render movies list component */}\n            <MoviesList movie={movies} loading={loading} handleMovieRemove={handleMovieRemove} />\n\n            {/* Show reset button if list contains at least one movie */}\n            {movies.length > 0 && (\n                <button className=\"btn btn-reset\" onClick={handleListReset}>Reset movie list.</button>\n            )}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}